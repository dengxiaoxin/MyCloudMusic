//应用Android插件
apply plugin: 'com.android.application'

android {
    //编译版本
    compileSdkVersion rootProject.ext.compileSdkVersion
    //编译工具版本
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        //应用唯一标识
        applicationId "com.jacky.mycloudmusic"
        //最小版本
        minSdkVersion rootProject.ext.minSdkVersion
        //目标版本
        targetSdkVersion rootProject.ext.targetSdkVersion
        //版本号
        versionCode rootProject.ext.versionCode
        //版本名称
        versionName rootProject.ext.versionName

        //开启MultiDex
        multiDexEnabled true

        //渠道相关
        flavorDimensions "versionCode"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //配置不同的环境
    productFlavors {
        //开发环境
        dev {
            //API端点:服务器接口地址
            buildConfigField 'String', "ENDPOINT", '"http://dev-my-cloud-music-api-rails.ixuea.com/"'

            //资源端点
            buildConfigField 'String', "RESOURCE_ENDPOINT", '"http://dev-courses-misuc.ixuea.com/%s"'

            dimension = minSdkVersion
        }

        //正式环境
        prod {
            //API端点:服务器接口地址
            buildConfigField 'String', 'ENDPOINT', '"http://api-courses-misuc.ixuea.com/"'

            //资源端点
            buildConfigField 'String', "RESOURCE_ENDPOINT", '"http://courses-misuc.ixuea.com/%s"'

            dimension = minSdkVersion
        }
    }

    //将源码兼容版本设置为Java 8
    //因为Butterknife需要Java 8
    //Butterknife requires Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    //添加所有libs目录里面的jar
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //圆形指示器
    //https://github.com/ongakuer/CircleIndicator
    implementation 'me.relex:circleindicator:2.1.4'
    //MagicIndicator
    //https://github.com/hackware1993/MagicIndicator
    implementation 'com.github.hackware1993:MagicIndicator:1.6.0'

    //轮播图
    //https://github.com/youth5201314/banner
    implementation 'com.youth.banner:banner:1.4.10'

    //圆形图片控件
    //https://github.com/hdodenhof/CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    //提供通过注解的方式引用控件
    //绑定方法
    //https://github.com/JakeWharton/butterknife
    implementation 'com.jakewharton:butterknife:10.2.1'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    //toast工具类
    //https://github.com/GrenderG/Toasty
    implementation 'com.github.GrenderG:Toasty:1.4.2'

    //MultiDex
    //Java/Kotlin文件编译后可以生成多个dex文件
    implementation "androidx.multidex:multidex:2.0.1"

    //========请求网络相关========
    //okhttp
    implementation "com.squareup.okhttp3:okhttp:4.7.2"

    //用来打印okhttp请求日志
    //当然也可以自定义
    implementation("com.squareup.okhttp3:logging-interceptor:4.7.2")

    //retrofit
    //https://github.com/square/retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'

    //使用gson解析json
    //https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.5'

    //适配retrofit使用gson解析
    //版本要和retrofit一样
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'

    //适配retrofit支持rxjava
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.2'

    //使用了Android响应式编程
    //RxJava和RxAndroid区别？
    //简单来说：就是RxAndroid在RxJava的基础上优化了一些功能,增强了Android特有的功能
    //https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //========end 请求网络相关========

    //跨界面通信框架
    //https://github.com/greenrobot/EventBus
    implementation 'org.greenrobot:eventbus:3.2.0'

    //图片加载框架Glide
    //https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    //封装了RecyclerView
    //提供更高层次的接口
    //https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'

    //封装了RecyclerView
    //https://github.com/jdsjlzx/LRecyclerView

    //真实项目中要么自己封装
    //要么用一个库
    //很少像这类依赖两个框架
    //我们这里的目的是想给大家在讲解一个一个框架的使用
    //这样大家工作中就多一个选择

    //总结起来就是：像分组这样的功能还是LRecyclerView用着方便点
    implementation 'com.github.jdsjlzx:LRecyclerView:1.5.4.4'

    //内存泄漏检测工具
    //https://github.com/square/leakcanary
    //只有调试模式下才添加该依赖,需要的时候开启
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-2'

    //palette（调色板）
    //implementation 'androidx.palette:palette:1.0.0'

    //更方便的使用glide和palette
    //https://github.com/florent37/GlidePalette
    implementation 'com.github.florent37:glidepalette:2.1.2'

    //emoji支持库
    implementation 'androidx.emoji:emoji-appcompat:1.1.0'
    //emoji控件
    implementation 'androidx.emoji:emoji-bundled:1.1.0'

    //Java测试依赖
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13'
    //Android测试依赖
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
